name: Google Drive Integration Test

on:
  push:
    paths:
      - 'app.py'
      - 'client/src/components/GoogleDriveConfig.js'
      - 'requirements.txt'
  pull_request:
    paths:
      - 'app.py'
      - 'client/src/components/GoogleDriveConfig.js'
      - 'requirements.txt'
  workflow_dispatch:
    inputs:
      test_url:
        description: 'Google Drive URL to test (optional)'
        required: false
        type: string

jobs:
  google-drive-test:
    runs-on: ubuntu-latest
    name: ☁️ Google Drive Integration Test
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 🔧 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🧪 Test Google Drive URL parsing
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from app import get_google_drive_download_url
        
        # Test various Google Drive URL formats
        test_urls = [
            'https://drive.google.com/file/d/1ABC123/view?usp=sharing',
            'https://drive.google.com/open?id=1ABC123',
            'https://drive.google.com/uc?id=1ABC123&export=download'
        ]
        
        print('🧪 Testing Google Drive URL parsing...')
        for url in test_urls:
            result = get_google_drive_download_url(url)
            expected = 'https://drive.google.com/uc?export=download&id=1ABC123'
            if '1ABC123' in result and 'uc?export=download' in result:
                print(f'✅ {url[:50]}... -> Valid')
            else:
                print(f'❌ {url[:50]}... -> Invalid: {result}')
                exit(1)
        
        print('✅ All Google Drive URL formats parsed correctly')
        "
    
    - name: 🧪 Test CSV loading function
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from app import load_csv_data
        import pandas as pd
        import io
        
        print('🧪 Testing CSV loading function...')
        
        # Create a test CSV in memory
        test_csv_content = '''INVOICENUMBER,INVOICEDATE,NETREVENUEAMOUNT,PHARMACISTNAME,LOCATIONNAME,CASHREVENUE,CREDITREVENUE
        INV-001,01/01/2024,150.00,Dr. Smith,Main Branch,50.00,100.00
        INV-002,02/01/2024,200.00,Dr. Johnson,North Branch,200.00,0.00'''
        
        # Save test CSV
        with open('test_sales.csv', 'w') as f:
            f.write(test_csv_content)
        
        print('✅ Test CSV created')
        
        # Test loading (will use local file since no Google Drive URL set)
        try:
            # Temporarily rename sales.csv if it exists
            import os
            if os.path.exists('sales.csv'):
                os.rename('sales.csv', 'sales.csv.backup')
            
            os.rename('test_sales.csv', 'sales.csv')
            
            df = load_csv_data()
            print(f'✅ CSV loaded successfully: {len(df)} rows')
            
            # Restore original file
            os.rename('sales.csv', 'test_sales.csv')
            if os.path.exists('sales.csv.backup'):
                os.rename('sales.csv.backup', 'sales.csv')
                
        except Exception as e:
            print(f'❌ CSV loading failed: {e}')
            exit(1)
        "
    
    - name: 🧪 Test API endpoints
      run: |
        echo "🚀 Starting Flask server for API testing..."
        python app.py &
        SERVER_PID=$!
        sleep 8
        
        echo "🧪 Testing Google Drive configuration endpoints..."
        
        # Test GET endpoint
        echo "📡 Testing GET /api/config/google-drive-url"
        curl -f http://localhost:5000/api/config/google-drive-url || exit 1
        
        # Test POST endpoint with empty URL
        echo "📡 Testing POST /api/config/google-drive-url (clear)"
        curl -f -X POST -H "Content-Type: application/json" \
             -d '{"url":""}' \
             http://localhost:5000/api/config/google-drive-url || exit 1
        
        echo "✅ Google Drive API endpoints working"
        
        # Clean up
        kill $SERVER_PID || true
        pkill -f "python app.py" || true
    
    - name: 🧪 Test with custom URL (if provided)
      if: github.event.inputs.test_url != ''
      env:
        TEST_URL: ${{ github.event.inputs.test_url }}
      run: |
        echo "🧪 Testing with custom Google Drive URL: $TEST_URL"
        
        python -c "
        import sys
        sys.path.append('.')
        from app import get_google_drive_download_url
        import requests
        
        test_url = '$TEST_URL'
        print(f'🔗 Testing URL: {test_url}')
        
        # Parse URL
        download_url = get_google_drive_download_url(test_url)
        print(f'📥 Download URL: {download_url}')
        
        # Test if URL is accessible (just check headers, don't download)
        try:
            response = requests.head(download_url, timeout=10)
            print(f'📊 Status Code: {response.status_code}')
            
            if response.status_code == 200:
                print('✅ Google Drive URL is accessible')
            else:
                print(f'⚠️ URL returned status {response.status_code}')
                
        except Exception as e:
            print(f'❌ Failed to access URL: {e}')
        "
    
    - name: 🎉 Integration test complete
      run: |
        echo "🎉 Google Drive integration tests completed successfully!"
        echo "✅ URL parsing works correctly"
        echo "✅ CSV loading function works"
        echo "✅ API endpoints are functional"
        echo "☁️ Ready for Google Drive CSV integration"
